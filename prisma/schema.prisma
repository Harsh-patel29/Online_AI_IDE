// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id String @id @default(cuid())
  name String?
  email String @unique
  image String?
  accounts Account[]
  role UserRole @default(USER)
  apiCalls Int @default(0)
  firstCallAt DateTime?
  myPlayground PlayGround[]
  staredPlayground StarMark[]
  chatMessages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Account{
  id String @id @default(cuid()) 
  userId String @map("user_id")
  type String
  provider String
  providerAccountId String
  refreshToken String? @map("refresh_token")
  accessToken String? @map("access_token")
  expiresAt Int? @map("expires_at")
  tokenType String? @map("token_type")
  scope String?
  idToken String? @map("id_token")
  sessionState String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider,providerAccountId])
  @@index([userId])
}

enum Templates {
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model PlayGround {
  id String @id @default(cuid())
  title String
  description String?
  template Templates @default(REACT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  StarMark StarMark[]
  userId String 
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  TemplateFiles TemplateFile[]
}

model StarMark {
  id String @id @default(cuid())
  userId String
  playgroundId String
  isMarked Boolean
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground PlayGround @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId,playgroundId])
}

model TemplateFile {
  id String @id @default(cuid())
  content Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playgroundId String @unique
  playground PlayGround @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id String @id @default(cuid()) 
  userId String
  role String
  content Json
  createdAt DateTime @default(now())
  apiCalls Int @default(0)
  firstCallAt DateTime? @default(now())

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  @@index([userId])
}